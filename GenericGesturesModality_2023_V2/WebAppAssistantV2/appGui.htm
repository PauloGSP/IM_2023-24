<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Calendário</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary-color: #4F5D73;
      --secondary-color: #f0f0f0;
      --text-color: #333;
      --background-color: #fff;
    }
    h1 {
      background-color: var(--primary-color);
      color: var(--background-color);
      margin: 0;
      padding: 10px;
      text-align: center;
    }
    h2 {
      font-size: 1.5rem;
      color: var(--text-color);
      margin-bottom: 0.5rem;
      text-align: center;
    }
    @media (max-width: 768px) {
      .top-section {
        flex-direction: column;
      }
      .calendar-container,
      .events-container {
        flex: 0 0 auto;
      }
      
      iframe {
        height: 50vh;
      }
    }
    .modal {
      display: none; /* Hidden by default */
      position: fixed; /* Stay in place */
      z-index: 1; /* Sit on top */
      left: 0;
      top: 0;
      width: 100%; /* Full width */
      height: 100%; /* Full height */
      overflow: auto; /* Enable scroll if needed */
      background-color: rgb(0,0,0); /* Fallback color */
      background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }
    .modal-content {
      background-color: #fefefe;
      margin: 15% auto; /* 15% from the top and centered */
      padding: 20px;
      border: 1px solid #888;
      width: 80%; /* Could be more or less, depending on screen size */
    }
    body {
      font-family: 'Poppins', sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      background: #fff;
    }
    .top-section {
      display: flex;
      flex: 1;
      padding-top: 5px; /* Adjust based on your actual header's height */
    }
    .calendar-container {
      flex: 0 0 70%;
      overflow-y: auto;
      margin: 0 auto;
    }
    .events-container {
      flex: 1; /* Adjust the flex property for the events container */
      overflow-y: auto;
    }
    #events-list{
      text-align: center;
      flex: 1;
      overflow-y: auto;
    }
    .mic{
      width: 150px;
    }
    .container {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      border-radius: 10px;
      background-color: #f0f0f0;
    }
    .responseText{
      border: solid 2px #8ea7cf;
      margin: 2%;
      color: #41683a;
    }
    .bottomNav{
      position: absolute;
      bottom: 2%;
      width: 95%;
    }
    .recognized{
      font-size:x-large;
    }
    iframe {
      width: 100%;
      height: 75vh;
      border: none;
      border-radius: 9px;
    }
    #moves-list {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-around; /* Adjust as needed for spacing */
    }
    #moves-list img {
      width: calc(33.33% - 10px); /* Adjust the subtraction value for spacing */
      height: auto; /* Keeps the aspect ratio of the image */
      margin: 5px; /* Spacing between images */
      object-fit: cover; /* This makes the image cover the area, can be adjusted */
    }
  </style>
</head>
<body>
  <h1 style="background-color: #4F5D73; margin: 0;">Assistente de Calendário</h1>
  <button id="testButton" onclick="testMessageHandler('PASSYR')">Year Right</button>
  <button id="testButton" onclick="testMessageHandler('PASSYL')">Year Left</button>
  <button id="testButton" onclick="testMessageHandler('PASSMR')">Month Right</button>
  <button id="testButton" onclick="testMessageHandler('PASSML')">Month Left</button>
  <button id="testButton" onclick="testMessageHandler('PASSWR')">Week Right</button>
  <button id="testButton" onclick="testMessageHandler('PASSWL')">Week Left</button>
  <button id="testButton" onclick="testMessageHandler('PASSDR')">Day Right</button>
  <button id="testButton" onclick="testMessageHandler('PASSDL')">Day Left</button>
  <div id="response"></div>
    <div class="top-section">
      <div class="calendar-container">
        <h2>Meu Calendário</h2>
        <iframe src="https://calendar.google.com/calendar/embed?height=600&wkst=2&bgcolor=%239bc9fa&ctz=Europe%2FLisbon&showTitle=0&showPrint=0&showTabs=0&showCalendars=0&showTz=0&src=bXVsdGltb2RhbGNhbGVuZGFyQGdtYWlsLmNvbQ&color=%23039BE5" style="border:solid 1px #777" width="800" height="600" frameborder="0" scrolling="no"></iframe>
      </div>
      <div id="events-container" class="events-container" >
        <div style="min-height: 10%;">
          <h2>Dia Selecionado</h2>
          <div id="selected-day-display">2023-12-21</div>
        </div>
        <h2>Lista de Movimentos</h2>
        <div id="moves-list">
          <img src="./moves/template.jpeg">
          <img src="./moves/template.jpeg">
          <img src="./moves/template.jpeg">
          <img src="./moves/template.jpeg">
          <img src="./moves/template.jpeg">
          <img src="./moves/template.jpeg">
          <img src="./moves/template.jpeg">
          <img src="./moves/template.jpeg">
          <img src="./moves/template.jpeg">
        </div>
      </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/@svgdotjs/svg.js@latest/dist/svg.min.js"></script>
  <script src="js/mmi.js"></script>
  <script src="js/globals.js"></script>
  <script src="js/jquery-3.6.4.min.js"></script>
  <script src="js/webtoolkit.utf8.js"></script>
  <script>
    var mmiCli_Out_add = "wss://"+host+":8005/IM/USER1/";
    var mmiCli_Out = null;
    var selectedDay = new Date(2023, 11, 21);;
    mmiCli_Out = new MMIClientSocket(mmiCli_Out_add + "APP");
    mmiCli_Out.onMessage.on(im1MessageHandler);
    mmiCli_Out.onOpen.on(socketOpenHandler);
    mmiCli_Out.openSocket();

    function formatDate(date) {
      return date.toISOString().split('T')[0];
    }
  
    // Function to display the selected day
    function displaySelectedDay() {
      const el = document.getElementById('selected-day-display');
      el.textContent = `${formatDate(selectedDay)}`;
    }
  
    // Functions to update the selected day
    function addDays(days) {
      selectedDay.setDate(selectedDay.getDate() + days);
      displaySelectedDay();
    }
  
    function addWeeks(weeks) {
      addDays(weeks * 7);
    }
  
    function addMonths(months) {
      selectedDay.setMonth(selectedDay.getMonth() + months);
      displaySelectedDay();
    }
  
    function addYears(years) {
      selectedDay.setFullYear(selectedDay.getFullYear() + years);
      displaySelectedDay();
    }
  
    // Function to handle the command
    function handleCommand(command) {
      switch (command["recognized"][1]) {
        case "PASSYR":
          addYears(1);
          break;
        case "PASSMR":
          addMonths(1);
          break;
        case "PASSWR":
          addWeeks(1);
          break;
        case "PASSDR":
          addDays(1);
          break;

        case "PASSYL":
          addYears(-1);
          break;
        case "PASSML":
          addMonths(-1);
          break;
        case "PASSWL":
          addWeeks(-1);
          break;
        case "PASSDL":
          addDays(-1);
          break;
      }
    }

    function socketOpenHandler(event) {
      console.log("---------------openSocketHandler---------------")
      if(mmiCli_Out.socket.readyState !== WebSocket.OPEN){return;}
    }

    function im1MessageHandler(data) {

      console.log("--------------im1MessageHandler---------------");

      if(data != null && data!="RENEW" && data!="OK") {
        console.log(data);
        

        var content = $(data).find("emma\\:interpretation").first().text().trim();
        if (typeof content == 'string') {
          try {
            console.log(content);

            let command = JSON.parse(content)
            handleCommand(command);

          } catch (e) { console.log(e); }
        }
      }
    }

    ///// Voice part untouched for now

    var mmiCli_1 = null;
    mmiCli_1 = new MMIClient(null, "https://"+host+":8000/IM/USER1/APPSPEECH");

    function sendToVoice(texto){
      let speak = "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.w3.org/2001/10/synthesis http://www.w3.org/TR/speech-synthesis/synthesis.xsd\" xml:lang=\"pt-PT\"><p>"+texto+"</p></speak>";
      var result = speak;
      mmiCli_1.sendToIM(new LifeCycleEvent("APPSPEECH", "IM", "text-1", "ctx-1").
        doStartRequest(new EMMA("text-", "text", "command", 1, 0).
        setValue(JSON.stringify(result))));
    }

    displaySelectedDay();
  </script>
  <script>
    function updateSelectedDay(year, month, day) {
      selectedDay = `${year}-${month}-${day}`;
      displaySelectedDay();
    }
  </script>
  <script>
    function createXmlDocument(xmlString) {
      var parser = new DOMParser();
      var xmlDoc = parser.parseFromString(xmlString, "text/xml");
      return xmlDoc;
    }

    function testMessageHandler(string) {
      // XML string with the structure you provided
      var xmlDataString = `
      <mmi:mmi xmlns:mmi="http://www.w3.org/2008/04/mmi-arch" mmi:Version="1.0">
        <mmi:ExtensionNotification mmi:context="gestures-ctx-1" mmi:requestId="gestures-id-3" mmi:source="GESTURES" mmi:target="FUSION">
          <mmi:data>
            <emma:emma xmlns:emma="http://www.w3.org/2003/04/emma" emma:Version="1.0">
              <emma:interpretation emma:confidence="1" emma:end="" emma:id="gestures-1" emma:medium="gestures" emma:mode="command" emma:start="">
                <command>{ "recognized": ["GESTURES", "${string}"], "confidence": "0.726459145545959"  }</command>
              </emma:interpretation>
            </emma:emma>
          </mmi:data>
        </mmi:ExtensionNotification>
      </mmi:mmi>`;

      // Call the im1MessageHandler with the XML document
      im1MessageHandler(createXmlDocument(xmlDataString));
    }
  </script>
</body>
</html>